#!/usr/bin/env Rscript
## ea.Rscript - version 0.34 (june 2014)
## an R program to perform enrichment analysis.

####################### set working environment up #######################

# library( parallel )
# library( multicore, quietly = T, warn.conflicts = F )
# library( foreach, quietly = T, warn.conflicts = F )
# library( doMC, quietly = T, warn.conflicts = F )

library( "EAtests" )  # for distribution
# source( "/home/checco/lib/R/myAtests.R" )  # for pre-distribution testing

##########################################################################

# print help message
# - parameters: list of (default) parameters
print_help_message <- function ( parameters ) {

    cat( "\n usage:\n" )
    cat( "\n  ea.Rscript [options] <data table(s)>\n" )
    cat( "\n  the first field in <data table> is the marker; other fields can be p-values, annotations or weights;\n" )
    cat( "  by default the script expects <data table(s)> with the format: <MarkerName>  <p-value>  <annotation>;\n" )
    cat( "  p-values and annotations fields can be specified with '--pheno' and '--annot' respectively (see below).\n" )
    cat( "  the script writes a number of files, all prefixed with <data table>'s name.\n" )
    cat( "\n options:\n" )
    cat( "    --help            print help and exit;\n" )
    cat( "    --annot <annot>   annotation field (numeric or word); specify as many as desired;\n" )
    cat( "    --boot <n>        number of bootstrap replicas [ no bootstrap by default ];\n" )
    cat( "    --bpt             perform binomial proportion tests [ no tests by default ];\n" )
    cat( "    --cannot <annot>  covariate annotation field (numeric or word); specify as many as desired;\n" )
    cat( "    --color <value>   quantile/interval colors in figures; missing ones will be interpolated;\n" )
    cat( "    --fdr             compute fdr [ no fdr by default ];\n" )
    cat( "    --fdrv <value>    threshold for false discovery [ default =", parameters$myFDR, "];\n" )
    cat( "    --fdrvsp          draw fdr_vs_p plots (forces '--fdr') [ no plots by default ];\n" )
    cat( "    --distr <value>   expected distribution ('e', 'u') of the phenotype [ default is 'u' (uniform) ];\n" )
    cat( "    --eest            estimate enrichment and regress z-squared vs annotations [ no estimate by default ];\n" )
    cat( "    --gc              perform genomic correction of p-values [ no gc by default ];\n" )
    cat( "    --header          if text data files have a header line [ no header expected by default ];\n" )
    cat( "    --ctrl <ctrl>     use accordingly annotatated SNPs as control SNPs [ default is everything ];\n" )
#     cat( "    --label <label>   set annotation interval base label [ default =", get_qlabel(), "];\n" )
    cat( "    --pheno <pheno>   phenotype field (numeric or word);\n" )
    cat( "    --prct <value>    p-value percentiles in which to test for significance [ default =", parameters$myP_prct, "];\n" )
    cat( "                      only one threshold can be specified per command line option;\n" )
    cat( "    --qq              draw qq/fold-plots [ no plots by default ];\n" )
    cat( "    --qqci            draw confidence intervals for qq/fold-plots [ not by default ];\n" )
    cat( "    --r               expect input files in R data format;\n" )
    cat( "    --rw <field>      reweighting factor field (for test statistic significance);\n" )
    cat( "    --snp <file>      list of SNPs to restrict the analyses to: if more lists are given, each is a filter;\n" )
    cat( "    --strbr <value>   breaking criteria for annotations:\n" )
    cat( "                      values can be either words 'auto', 'std', 'unq' or comma-separated lists of break points;\n" )
    cat( "                        'auto'  means 'use the annotation value itself as quantile' (good for discrete annotations)\n" )
    cat( "                        'std'   means 'make (n) quantiles (see '--strn') using _all_ annotation values',\n" )
    cat( "                        'unq'   means make (n) quantiles removing duplicate annotation values';\n" )
    cat( "                      values are assigned, in order, to annotations (missing values are treated as 'auto');\n" )
    cat( "    --strn <value>    n. of annotation quantiles: values are assigned, in order, to annotations [ default =", parameters$numof.breaks.default, "];\n" )
    cat( "                      [note: these options are overridden by '--strbr' options with numerical break points]\n" )
    cat( "    --testp <value>   significance tests p-value plots ceiling [ default =", parameters$testp, "];\n" )
    cat( "    --v               verbose mode on (the program prints lots of stuff on screen);\n" )
    cat( "\n" )
}

# parse command line arguments
# - myrgs: the command line arguments
# returns a list of parameters
parse_command_line <- function ( myrgs=NULL ) {

	parameters <- list(

		helpme = FALSE,
		annotations = NULL,
		covannotations = NULL,
		ctrl_annotation = "",
		phenos = NULL,

		bootstrap = 0,
		distr = c(),
		do_compute_fdr = FALSE,
		do_draw_fdr_vs_p_plots = FALSE,
		do_draw_qq_plots = FALSE,
		do_draw_cis = FALSE,
		do_estimate_enrichment = FALSE,
		do_genomic_correction = FALSE,
		do_perform_bpt = FALSE,
		expect_rdata = FALSE,
		figure.colors = NULL,
		read.header = FALSE,
		reweighting = NULL,
		verbose = FALSE,

		SNP.lists = c(),
		SNP.filter.lists = "",

		# p-value percentiles for QQ-plots and tests
		P_prct_plot = 0.001,
		# myP_prct = c( 0.001 ),
		# myP_prct = c( 0.001, 0.01, 0.1 ),
		myP_prct = c( 0.001, 0.01, 0.1, 0.25, 0.5, 0.9 ),

		tiny = 1.E-72,  # to prevent NANs of sort
		testp = 1.E-12,  # minimum p-value for significance test plots
		neglog10max = 12,  # negative logarithm of the minimum p-value
		N_ytics = 5,  # number of y-axis tics for significance test plots

		myFDR = 0.01,  # FDR significance level

		mybreaks = c(),  # vector of interval break points lists

		numof.breaks.default = 4,  # default number of annotation quantiles
		numof.breaks = c()  # number of annotation quantiles

	)

	if ( length( myrgs ) > 0 ) {

		opt.vector <- vector()

		index.vector <- 1 : length( myrgs )
		cat( "\ncommand line arguments:\n  ", myrgs, "\n" )

		sub.index.vector <- index.vector[ myrgs == "--help" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$helpme <- TRUE
			opt.vector <- c(
				sub.index.vector
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--annot" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$annotations <- myrgs[ sub.index.vector + 1 ] # array of elements following the flags
			cat( c( "annotations:", parameters$annotations, "\n" ), sep = "\n " )
			parameters$myreaks[ 1 : length( parameters$annotations ) ] = "auto"
			parameters$numof.breaks[ 1 : length( parameters$annotations ) ] = parameters$numof.breaks.default
			opt.vector <- c(
				opt.vector,
				sub.index.vector,
				sub.index.vector + 1
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--boot" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$bootstrap <- as.numeric( myrgs[ sub.index.vector[ length( sub.index.vector ) ] + 1 ] )
			cat( c( "number of bootstrap replicas =", parameters$bootstrap, "]\n" ) )
			opt.vector <- c(
				opt.vector,
				sub.index.vector,
				sub.index.vector + 1
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--bpt" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$do_perform_bpt <- TRUE
			cat( "binomial proportion test requested.\n" )
			opt.vector <- c(
				opt.vector,
				sub.index.vector
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--cannot" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$covannotations <- myrgs[ sub.index.vector + 1 ] # array of elements following the flags
			cat( c( "covariate annotations:", parameters$covannotations, "\n" ), sep = "\n " )
			opt.vector <- c(
				opt.vector,
				sub.index.vector,
				sub.index.vector + 1
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--color" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$figure.colors <- myrgs[ sub.index.vector + 1 ] # array of elements following the flags
			cat( c( "figure colors:", parameters$figure.colors, "\n" ), sep = "\n " )
			opt.vector <- c(
				opt.vector,
				sub.index.vector,
				sub.index.vector + 1
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--distr" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$distr <- myrgs[ sub.index.vector + 1 ] # array of elements following the flags
			cat( c( "phenotypes distributions:", parameters$distr, "\n" ), sep = "\n " )
			opt.vector <- c(
				opt.vector,
				sub.index.vector,
				sub.index.vector + 1
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--ctrl" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$ctrl_annotation <- myrgs[ sub.index.vector[ length( sub.index.vector ) ] + 1 ]
			cat( parameters$ctrl_annotation, "set as control annotation.\n" )
			opt.vector <- c(
				opt.vector,
				sub.index.vector,
				sub.index.vector + 1
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--fdr" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$do_compute_fdr <- TRUE
			cat( "fdr requested.\n" )
			opt.vector <- c(
				opt.vector,
				sub.index.vector
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--eest" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$do_estimate_enrichment <- TRUE
			cat( "enrichment estimate requested.\n" )
			opt.vector <- c(
				opt.vector,
				sub.index.vector
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--fdrv" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$myFDR <- as.numeric( myrgs[ sub.index.vector[ length( sub.index.vector ) ] + 1 ] )
			cat( c( "FDR set to:", parameters$myFDR, "\n" ) )
			opt.vector <- c(
				opt.vector,
				sub.index.vector,
				sub.index.vector + 1
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--fdrvsp" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$do_compute_fdr <- TRUE
			parameters$do_draw_fdr_vs_p_plots <- TRUE
			cat( "FDR_VS_p plots requested.\n" )
			opt.vector <- c(
				opt.vector,
				sub.index.vector
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--gc" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$do_genomic_correction <- TRUE
			cat( "genomic correction requested.\n" )
			opt.vector <- c(
				opt.vector,
				sub.index.vector
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--header" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$read.header <- TRUE
			cat( "expecting header in input files..\n" )
			opt.vector <- c(
				opt.vector,
				sub.index.vector
			)
		}
# 		sub.index.vector <- index.vector[ myrgs == "--label" ]
# 		if ( length( sub.index.vector ) > 0 ) {
# 			set_qlabel( myrgs[ sub.index.vector[ length( sub.index.vector ) ] + 1 ] )
# 			cat( c( "annotation interval label set to:", get_qlabel(), "\n" ) )
# 			opt.vector <- c(
# 				opt.vector,
# 				sub.index.vector,
# 				sub.index.vector + 1
# 			)
# 		}
		sub.index.vector <- index.vector[ myrgs == "--pheno" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$phenos <- myrgs[ sub.index.vector + 1 ] # array of elements following the flags
			cat( c( "phenotypes:", parameters$phenos, "\n" ), sep = "\n " )
			opt.vector <- c(
				opt.vector,
				sub.index.vector,
				sub.index.vector + 1
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--prct" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$myP_prct <- as.numeric( myrgs[ sub.index.vector + 1 ] ) # array of elements following the flags
			cat( c( "p-value percentiles:", parameters$myP_prct, "\n" ) )
			opt.vector <- c(
				opt.vector,
				sub.index.vector,
				sub.index.vector + 1
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--qq" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$do_draw_qq_plots <- TRUE
			cat( "qq-plots requested.\n" )
			opt.vector <- c(
				opt.vector,
				sub.index.vector
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--qqci" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$do_draw_cis <- TRUE
			cat( "confidence intervals requested.\n" )
			opt.vector <- c(
				opt.vector,
				sub.index.vector
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--r" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$expect_rdata <- TRUE
			cat( "expecting R data as input..\n" )
			opt.vector <- c(
				opt.vector,
				sub.index.vector
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--rw" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$reweighting <- myrgs[ sub.index.vector + 1 ] # array of elements following the flags
			cat( c( "reweighting factors:", parameters$reweighting, "\n" ), sep = "\n " )
			opt.vector <- c(
				opt.vector,
				sub.index.vector,
				sub.index.vector + 1
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--snp" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$SNP.lists <- myrgs[ sub.index.vector + 1 ] # array of elements following the flags
			cat( c( "SNP lists:", parameters$SNP.lists, "\n" ), sep = "\n " )
			opt.vector <- c(
				opt.vector,
				sub.index.vector,
				sub.index.vector + 1
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--strbr" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$mybreaks <- myrgs[ sub.index.vector + 1 ] # array of elements following the flags
			cat( c( "annotation strata breaking points:", parameters$mybreaks, "\n" ), sep = "\n " )
			opt.vector <- c(
				opt.vector,
				sub.index.vector,
				sub.index.vector + 1
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--strn" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$numof.breaks <- myrgs[ sub.index.vector + 1 ] # array of elements following the flags
			cat( c( "annotation strata quantiles:", parameters$numof.breaks, "\n" ), sep = "\n " )
			opt.vector <- c(
				opt.vector,
				sub.index.vector,
				sub.index.vector + 1
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--testp" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$testp <- as.numeric( myrgs[ sub.index.vector[ length( sub.index.vector ) ] + 1 ] )
			cat( c( "test p-value plot ceiling set to:", parameters$testp, "\n" ) )
			if ( parameters$tiny > parameters$testp ) parameters$tiny <- parameters$testp
			parameters$neglog10max <- -log10( parameters$testp )
			if( parameters$bootstrap > 0 ) parameters$neglog10max <- -log10( 1 / parameters$bootstrap )
			opt.vector <- c(
				opt.vector,
				sub.index.vector,
				sub.index.vector + 1
			)
		}
		sub.index.vector <- index.vector[ myrgs == "--v" ]
		if ( length( sub.index.vector ) > 0 ) {
			parameters$verbose <- TRUE
			cat( "verbose mode on.\n" )
			opt.vector <- c(
				opt.vector,
				sub.index.vector
			)
		}
		for ( pi in length( parameters$distr ) + 1 : length( parameters$phenos ) ) parameters$distr[ pi ] <- 'u'
		for ( ai in length( parameters$mybreaks ) + 1 : length( parameters$annotations ) ) parameters$mybreaks[ ai ] <- "auto"
		for ( ai in length( parameters$numof.breaks ) + 1 : length( parameters$annotations ) ) parameters$numof.breaks[ ai ] <- parameters$numof.breaks.default
		if ( length( opt.vector ) == 0 ) parameters$data.files <- myrgs
		else parameters$data.files <- myrgs[ -opt.vector ]

	} else {

		cat( "\nyou may have neglected to provide input.\n" )
		parameters$helpme <- TRUE

	}

	return( parameters )

}

options( "warn" = 1 )
myrgs <- commandArgs( TRUE )
cat( "\n=============  Enrichment Analysis  =============\n" )

parameters <- parse_command_line( myrgs )

if ( length( parameters$data.files ) > 0 && !parameters$helpme ) {

	for ( data.file in parameters$data.files ) {

		########################################## read data table ############################################
		cat( "reading data '", data.file, "'\n", sep = "" )
		if ( parameters$expect_rdata ) {
			data.loaded <- load( data.file )
			data_PROD <- get( data.loaded[ 1 ] )
		} else if ( parameters$read.header ) {
			data_PROD <- read.table( data.file, header = T )
		} else { data_PROD <- read.table( data.file, header = F ) }
		if ( ! ( "MarkerName" %in% names( data_PROD ) ) ) names( data_PROD )[ 1 ] <- "MarkerName"
		if ( parameters$verbose ) print( head( data_PROD ) )
		if ( is.null( parameters$phenos ) ) parameters$phenos <- 2
		numerical_colnames <- !is.na( suppressWarnings( as.numeric( parameters$phenos ) ) )
		parameters$phenos[ numerical_colnames ] <-
			names( subset( head( data_PROD ), select = as.numeric( parameters$phenos[ numerical_colnames ] ) ) )
		parameters$phenos <- names( subset( head( data_PROD ), select = parameters$phenos ) )
		cat( "phenotypes: ", parameters$phenos, "\n" )
		if ( is.null( parameters$reweighting ) ) {
			parameters$reweighting <- "__reweighting__"
			while( parameters$reweighting %in% names( data_PROD ) )
				parameters$reweighting <- paste( "_", parameters$reweighting, "_", sep="" )
			data_PROD <- cbind( data_PROD, rep( 1, length( data_PROD$MarkerName ) ) )
			names( data_PROD )[ length( names( data_PROD ) ) ] <- parameters$reweighting
		} else {
			numerical_colnames <- !is.na( suppressWarnings( as.numeric( parameters$reweighting ) ) )
			parameters$reweighting[ numerical_colnames ] <-
				names( subset( head( data_PROD ), select = as.numeric( parameters$reweighting[ numerical_colnames ] ) ) )
			parameters$reweighting <- names( subset( head( data_PROD ), select = parameters$reweighting ) )
		}
		if ( !is.null( parameters$covannotations ) ) {
			numerical_colnames <- !is.na( suppressWarnings( as.numeric( parameters$covannotations ) ) )
			parameters$covannotations[ numerical_colnames ] <-
				names( subset( head( data_PROD ), select = as.numeric( parameters$covannotations[ numerical_colnames ] ) ) )
			parameters$covannotations <- names( subset( head( data_PROD ), select = parameters$covannotations ) )
		}
		if ( is.null( parameters$annotations ) ) {
			parameters$annotations <- names( data_PROD )[ -which( names( data_PROD ) %in% c( "MarkerName", parameters$phenos, parameters$reweighting, parameters$covannotations ) ) ]
		} else {
			numerical_colnames <- !is.na( suppressWarnings( as.numeric( parameters$annotations ) ) )
			parameters$annotations[ numerical_colnames ] <-
				names( subset( head( data_PROD ), select = as.numeric( parameters$annotations[ numerical_colnames ] ) ) )
			parameters$annotations <- names( subset( head( data_PROD ), select = parameters$annotations ) )
		}
		cat( "annotations: ", parameters$annotations, "\n" )
		parameters$reweighting <- array( parameters$reweighting, length( parameters$annotations ) )
		if ( parameters$ctrl_annotation != "" && is.element( parameters$ctrl_annotation, names( data_PROD ) ) ) {
			gcfilter = !is.na( data_PROD[, parameters$ctrl_annotation ] ) & data_PROD[, parameters$ctrl_annotation ] >= 1
		} else gcfilter = NULL

		#######################################################################################################

		if ( parameters$do_genomic_correction ) {
			cat( "performing genomic correction..\n" )
			for ( pheno in parameters$phenos ) data_PROD[, pheno ] <- gc_pval( data_PROD[, pheno ], gcfilter )
		}

		if ( length( parameters$SNP.lists ) > 0 ) {
			SNP.list.counter = 1
			parameters$SNP.filter.lists <- c()
			filter.label <- "__filter__"
			while ( length( grep( paste( "^", filter.label, sep="" ), names( data_PROD ) ) ) > 0 )
				filter.label <- paste( "_", filter.label, "_", sep="" )
			cat( "reading SNP lists..\n" )
			for ( SNP.list in parameters$SNP.lists ) {
				read.table( SNP.list, header = F ) -> tmp.list
				filter.name <- paste( filter.label, SNP.list.counter, sep="" )
				data_PROD[, filter.name ] <- data_PROD$MarkerName %in% tmp.list$V1
				parameters$SNP.filter.lists <- c( parameters$SNP.filter.lists, filter.name )
				SNP.list.counter = SNP.list.counter + 1
			}
		}

		for ( pheno in parameters$phenos ) {

			pj <- which ( parameters$phenos == pheno )
			cat( "working on phenotype [", pj, "] '", pheno, "'..\n", sep = "" )

			if ( parameters$distr[ pj ] == 'e' ) {
				cat( "computing ecdf for phenotype", pheno, "..\n" )
				sortedpheno <- sort( data_PROD[ !is.na( data_PROD[, pheno ] ), pheno ] )
				pheno_ecdf <- ( 1 : length( sortedpheno ) ) / length( sortedpheno )
				pheno_p <- approx( sortedpheno, pheno_ecdf, data_PROD[ !is.na( data_PROD[, pheno ] ), pheno ] )
				data_PROD[ !is.na( data_PROD[, pheno ] ), pheno ] <- ifelse( pheno_p$y == 0, parameters$tiny, pheno_p$y )
				png( paste( data.file, pheno, "ecdf.png", sep="_" ) )
				plot( sortedpheno, pheno_ecdf )
				dev.off()
				png( paste( data.file, pheno, "pecdf.png", sep="_" ) )
				plot( ecdf( pheno_ecdf ) )
				dev.off()
			} else {
				data_PROD[, pheno ] = data_PROD[, pheno ] / max( data_PROD[, pheno ], 1, na.rm=T )
			}

			for ( annotation in parameters$annotations ) {

				aj <- which ( parameters$annotations == annotation )
				cat( "working on annotation [", aj, "] '", annotation, "'..\n", sep = "" )

				if ( parameters$do_compute_fdr ) {

					cat( "computing FDR..\n" )
					fdr.filename <- paste( data.file, pheno, annotation, "FDR", parameters$myFDR, "table.txt", sep = "_" )
					if ( parameters$do_draw_fdr_vs_p_plots ) {
						filename.spec <- paste( pheno, annotation, "FDR", sep = "_" )
						myplot.filename <- paste( data.file, filename.spec, "FDRplot.pdf", sep = "_" )
						pdf( file = myplot.filename )
					}
					if ( parameters$verbose ) {
						cat( "call of compute_fdr() with arguments:\n" )
						cat( "data.file = " ); print( data.file )
						cat( "data_PROD =\n" ); print( head( data_PROD ) )
						cat( "pheno = " ); print( pheno )
						cat( "annotation = " ); print( annotation )
						cat( "mybreaks = " ); print( parameters$mybreaks[ aj ] )
						cat( "numof.breaks = " ); print( parameters$numof.breaks[ aj ] )
						cat( "filter = " ); print( parameters$SNP.filter.lists )
						cat( "myFDR = " ); print( parameters$myFDR )
					}
					myfdr.table <- compute_fdr(
						data.file,
						data_PROD,
						pheno,
						annotation,
						parameters$mybreaks[ aj ],
						parameters$numof.breaks[ aj ],
						figure.colors = parameters$figure.colors,
						filter.name = parameters$SNP.filter.lists,
						fdr.level = parameters$myFDR,
						draw_plots = parameters$do_draw_fdr_vs_p_plots
					)
					mynames <- colnames( myfdr.table )
					mynames[ 1 ] <- paste( paste( annotation, "strata", sep = "_" ), "[=]" )
					write.table( myfdr.table, file = fdr.filename, quote = F, col.names = mynames, na = "-" )
					if( parameters$do_draw_fdr_vs_p_plots ) dev.off()

				}

				if ( parameters$do_draw_qq_plots ) {

					cat( "drawing QQ-plots..\n" )
					for ( filter.name in parameters$SNP.filter.lists ) {
						if ( parameters$verbose ) {
							cat( "call of draw_qq_plots() with arguments:\n" )
							cat( "data_PROD =\n" ); print( head( data_PROD ) )
							cat( "pheno = " ); print( pheno )
							cat( "annotation = " ); print( annotation )
							cat( "mybreaks = " ); print( parameters$mybreaks[ aj ] )
							cat( "numof.breaks = " ); print( parameters$numof.breaks[ aj ] )
							cat( "filter = " ); print( filter.name )
							cat( "P_prct_plot = " ); print( parameters$P_prct_plot )
						}
						if ( filter.name == "" ) {
							qq.table.filename <- paste( data.file, pheno, annotation, "QQ_table.txt", sep = "_" )
							pdf( file = paste( data.file, pheno, annotation, 'QQ_allP.pdf', sep = "_" ) )
							qq.table <- draw_qq_plots(
								data_PROD,
								pheno,
								annotation,
								parameters$mybreaks[ aj ],
								parameters$numof.breaks[ aj ],
								ci = parameters$do_draw_cis,
								figure.colors = parameters$figure.colors,
								P_prct = parameters$P_prct_plot,
								verbose = parameters$verbose
							)
							pdf( file = paste( data.file, pheno, annotation, 'QQ_fold.pdf', sep = "_" ) )
							dummytable <- draw_fold_plots(
								data_PROD,
								pheno,
								annotation,
								parameters$mybreaks[ aj ],
								parameters$numof.breaks[ aj ],
								ci = parameters$do_draw_cis,
								figure.colors = parameters$figure.colors,
								P_prct = parameters$P_prct_plot,
								verbose = parameters$verbose
							)
						} else {
							filter.str <- paste( "replica", which( parameters$SNP.filter.lists == filter.name ), sep = "_" )
							qq.table.filename <- paste( data.file, pheno, annotation, "QQ_table.txt", filter.str, sep = "_" )
							pdf( file = paste( data.file, pheno, annotation, 'QQ_allP.pdf', filter.str, sep = "_" ) )
							qq.table <- draw_qq_plots(
								data_PROD,
								pheno,
								annotation,
								parameters$mybreaks[ aj ],
								parameters$numof.breaks[ aj ],
								ci = parameters$do_draw_cis,
								figure.colors = parameters$figure.colors,
								filter.name = filter.name,
								P_prct = parameters$P_prct_plot,
								verbose = parameters$verbose
							)
							pdf( file = paste( data.file, pheno, annotation, 'QQ_fold.pdf', filter.str, sep = "_" ) )
							dummytable <- draw_fold_plots(
								data_PROD,
								pheno,
								annotation,
								parameters$mybreaks[ aj ],
								parameters$numof.breaks[ aj ],
								ci = parameters$do_draw_cis,
								figure.colors = parameters$figure.colors,
								filter.name = filter.name,
								P_prct = parameters$P_prct_plot,
								verbose = parameters$verbose
							)
						}
						write.table( qq.table, file = qq.table.filename, quote = F, row.names = F )
						dev.off()
						dev.off()

					}

				}

				if ( parameters$do_estimate_enrichment ) {

					cat( "estimating enrichment..\n" )
					enrichment.filename <- paste( data.file, pheno, annotation, "EE.txt", sep = "_" )
					enrichment.regfilename <- paste( data.file, pheno, annotation, "EEreg.png", sep = "_" )
					enrichment.resfilename <- paste( data.file, pheno, annotation, "EEres.png", sep = "_" )
					reg_annotations <- unique( c( annotation, parameters$covannotations ) )
					if ( parameters$verbose ) {
						cat( "call of estimate_enrichment() with arguments:\n" )
						cat( "data_PROD =\n" ); print( head( data_PROD ) )
						cat( "pheno = " ); print( pheno )
						cat( "annotations = " ); print( reg_annotations )
						cat( "focal annotation = " ); print( annotation )
						cat( "mybreaks = " ); print( parameters$mybreaks[ aj ] )
						cat( "numof.breaks = " ); print( parameters$numof.breaks[ aj ] )
					}
					if( length( reg_annotations ) > 0 ) {
						myenrichment.list <- estimate_enrichment(
							data_PROD,
							pheno,
							reg_annotations,
							annotation,
							parameters$SNP.filter.lists,
							parameters$mybreaks[ aj ],
							parameters$numof.breaks[ aj ]
						)
						myresiduals = list()
						if ( !is.null( myenrichment.list ) ) {
							myresiduals <- myenrichment.list$res
							mycolnames <- colnames( myenrichment.list$reg )
							mycolnames[ 1 ] <- paste( "reg", mycolnames[ 1 ] )
							myrownames <- rownames( myenrichment.list$reg )
							myenrichment <- myenrichment.list$reg
							myenrichment.table <- matrix( myenrichment,
								dimnames = list( myrownames, mycolnames ),
								ncol = length( mycolnames )
							)
							write.table(
								myenrichment.table,
								file = enrichment.filename,
								quote = F,
								col.names = mycolnames,
								row.names = myrownames,
								na = "-"
							)
							tempz <- qnorm( .5 * data_PROD[, pheno ] ) * ( rbinom( length( data_PROD[, pheno ] ), 1, .5 ) - .5 ) * 2
							tempannot <- data_PROD[ !is.na( tempz ), annotation ]
							print( summary( tempannot ) )
							tempz <- tempz[ !is.na( tempz ) ]^2 / var( tempz[ !is.na( tempz ) ] )
							tempz[ tempz == 0 ] = min( tempz )
							tempz <- log( tempz )
							png( enrichment.regfilename )
							plot( tempannot, tempz, xlab = annotation, ylab = "log(z-squared)", type = "p", pch = '.' )
							abline(
								myenrichment.table[ paste0( "[=]", "intercept" ), mycolnames[ 1 ] ],
								myenrichment.table[ paste0( "[=]", annotation ), mycolnames[ 1 ] ],
								col = "red"
							)
							dev.off()
							mycounts = c()
							myresiduals.mean = mean( unlist( myresiduals ), na.rm = T )
							myresiduals.sd = sd( unlist( myresiduals ), na.rm = T )
							cat( "residuals mean:", myresiduals.mean, "\n" )
							cat( "residuals stddev:", myresiduals.sd, "\n" )
							myresiduals.hist = hist( unlist( myresiduals ), breaks = "scott", plot = F )
							myresiduals.breaks = myresiduals.hist$breaks
							myresiduals.mids = myresiduals.hist$mids
							for ( i in 1 : length( myresiduals ) ) {
								cat( "computing histogram for residuals list", i, "\n" )
								myresiduals.hist = hist( myresiduals[[ i ]], breaks = myresiduals.breaks, plot = F )
								mycounts = cbind( mycounts, myresiduals.hist$counts )
							}
							mymeanvec = apply( mycounts, 1, mean, na.rm = T )
							myserrvec = apply( mycounts, 1, sd, na.rm = T ) / sqrt( length( myresiduals ) )
							mymidsvec = myresiduals.mids[ abs( myresiduals.mids ) < 5 * myresiduals.sd ]
							mymeanvec = mymeanvec[ abs( myresiduals.mids ) < 5 * myresiduals.sd ]
							myserrvec = myserrvec[ abs( myresiduals.mids ) < 5 * myresiduals.sd ]
							if ( !all( is.na( myserrvec ) ) ) {
								mylim = c( 0, max( mymeanvec + myserrvec, na.rm = T ) )
							} else mylim = c( 0, max( mymeanvec, na.rm = T ) )
							png( enrichment.resfilename )
							mybarvec = barplot( mymeanvec, names.arg = format( mymidsvec, digits = 2 ), ylim = mylim )
							myfinitevec = is.finite( mymeanvec ) & is.finite( myserrvec ) & myserrvec != 0
							mymeanvec = mymeanvec[ myfinitevec ]
							myserrvec = myserrvec[ myfinitevec ]
							mybarvec = mybarvec[ myfinitevec ]
							if ( !all( is.na( myserrvec ) ) ) {
								arrow.length = max( ( max( mybarvec ) - min( mybarvec ) ) / ( 100 * length( mybarvec ) ), 1.E-9 )
								arrows( mybarvec, mymeanvec, mybarvec, mymeanvec - myserrvec, angle = 90, length = arrow.length )
								arrows( mybarvec, mymeanvec, mybarvec, mymeanvec + myserrvec, angle = 90, length = arrow.length )
							}
							title( paste( "log(z-squared) VS", annotation, "regression residuals" ) )
							dev.off()
						}
					}

				}

				if ( parameters$do_perform_bpt ) {

					pdf( paste( data.file, pheno, annotation, "BPT.pdf", sep = "_" ) )
					par( mar = c( 5, 5, 5, 2 ) )
					# set plot area up
					plot( NULL,
						cex = 1.5,
						xaxt = "n", yaxt = "n",
						xlab = "", ylab = "",
						xlim = c( log10( min( parameters$myP_prct ) ), log10( max( parameters$myP_prct ) ) ),
						ylim = c( 0, parameters$neglog10max )
					)

					counter = 1

					for ( P_prct in parameters$myP_prct ) {
						cat( "performing binomial proportion test for Top ", P_prct*100, "%..\n", sep = "" )
						bpt.filename <- paste( data.file, pheno, annotation, "BPT", format( P_prct, scientific = 4 ), "table.txt", sep = "_" )
						mybpt.table <- perform_bpt(
							data_PROD,
							pheno,
							annotation,
							parameters$ctrl_annotation,
							parameters$mybreaks[ aj ],
							parameters$numof.breaks[ aj ],
							filter.names = parameters$SNP.filter.lists,
							reweighting = parameters$reweighting[ aj ],
							P_prct = P_prct
						)
						if ( parameters$bootstrap > 0 ) {
							cat( "proceeding with bootstrap..\n" )
							bt.datafilename <- paste( data.file, pheno, annotation, "BPT", format( P_prct, scientific = 4 ), "bt.RData", sep = "_" )
							bootstrap.function <- function (
								data_BOOT,
								indices,
								P_pheno,
								annot_name,
								annot_name_ctrl,
								mybreaks,
								numof.breaks,
								filter.names,
								reweighting,
								P_prct
							) {
								perform_bpt(
									data_BOOT,
									P_pheno,
									annot_name,
									annot_name_ctrl,
									mybreaks,
									numof.breaks,
									filter.names,
									reweighting,
									P_prct,
									indices
								)
							}
							bootstrap.test <- boot(
								data_PROD,
								bootstrap.function,
								parameters$bootstrap,
								sim = "permutation",
								P_pheno = pheno,
								annot_name = annotation,
								annot_name_ctrl = parameters$ctrl_annotation,
								mybreaks = parameters$mybreaks[ aj ],
								numof.breaks = parameters$numof.breaks[ aj ],
								filter.names = parameters$SNP.filter.lists,
								reweighting = parameters$reweighting[ aj ],
								P_prct = P_prct
#                                     , parallel = "multicore", ncpus = 2
							)
							if ( parameters$verbose ) print( bootstrap.test )
							for ( i in 1 : length( bootstrap.test$t0 ) ) {
								mybpt.table[ i ] <- NA
								if ( !all( is.na( bootstrap.test$t[, i ] ) ) ) {
									tecdf <- ecdf( c( bootstrap.test$t0[ i ], bootstrap.test$t[, i ] ) )
									if ( parameters$verbose ) cat( "test outcome[", i, "]: ", bootstrap.test$t0[ i ], "\n", sep="" )
									mybpt.table[ i ] <- tecdf( bootstrap.test$t0[ i ] )
									if ( parameters$verbose ) {
										bt.pngname <- paste( data.file, pheno, annotation, "BPT", format( P_prct, scientific = 4 ), i, "bt.png", sep = "_" )
										png( bt.pngname )
										par( mfrow = c( 1, 2 ) )
										plot( tecdf )
										abline( v = bootstrap.test$t0[ i ], lwd=2, col="red" )
										hist( bootstrap.test$t[, i ], breaks="scott" )
										abline( v = bootstrap.test$t0[ i ], lwd=2, col="red" )
										dev.off()
									}
								}
							}
							if ( parameters$verbose ) {
								print( mybpt.table )
								save( bootstrap.test, file=bt.datafilename )
							}
						}
						if ( counter == 1 ) { # set stuff up
							mycolnames <- colnames( mybpt.table )
							myrownames <- rownames( mybpt.table )
							key.names <- paste( rep( mycolnames, each = length( myrownames ) ), myrownames ) # lines in the plot
							if( length( mycolnames ) <= 1 ) {
								key.points <- rep( 16, each = length( myrownames ) )
							} else key.points <- rep( c( 16, 6, 2 ), each = length( myrownames ) )
							key.colors <- rep( mycolorfunction( 1 : length( myrownames ), length( myrownames ), parameters$figure.colors ), max( length( mycolnames ), 1 ) )
							mycolnames[ 1 ] <- paste( paste( annotation, "strata", sep = "_" ), "[=]" )
							myx.data <- matrix( ncol = length( parameters$myP_prct ), nrow = length( mybpt.table ) )
							myy.data <- matrix( ncol = length( parameters$myP_prct ), nrow = length( mybpt.table ) )
						}
						write.table( format( mybpt.table, digits = 2, scientific = T, quote = F ), file = bpt.filename, quote = F, col.names = mycolnames, na = "-", sep = "\t" )
						myx.data[, which( parameters$myP_prct == P_prct ) ] <- rep( log10( P_prct ), length( mybpt.table ) )
						myy.data[, which( parameters$myP_prct == P_prct ) ] <- -log10( c( mybpt.table ) + parameters$tiny )
						counter = counter + 1
					}

# 					exclusion_list <- c( # not in the plot
# 						paste( "[>] ", get_qlabel(), "_", length( myrownames ), sep = "" ),
# 						paste( "[>] ", get_qlabel(), "_", length( myrownames ) - 1, sep = "" ),
# 						paste( "[<] ", get_qlabel(), "_", 1, sep = "" ),
# 						paste( "[<] ", get_qlabel(), "_", 2, sep = "" )
# 					)
					exclusion_list <- c( # not in the plot
						paste( "[>]", myrownames[ length( myrownames ) ] ),
						paste( "[>]", myrownames[ length( myrownames ) - 1 ] ),
						paste( "[<]", myrownames[ 1 ] ),
						paste( "[<]", myrownames[ 2 ] )
					)

					for ( k in 1 : length( key.names ) ) {
						if ( ! key.names[ k ] %in% exclusion_list ) {
							lines(
								x = myx.data[ k, !is.na( myy.data[ k, ] ) ],
								y = myy.data[ k, !is.na( myy.data[ k, ] ) ],
								col = key.colors[ k ],
								pch = key.points[ k ],
								type = "b",
								cex = 1.5
							)
						}
					}

					# multiple tests significance lines
					abline( a = 2, b = 0, col = 'red', lwd = 1.5, lty = 2 )
					abline( a = -log10( 0.05 ), b = 0, col = 'orange', lwd = 1.5, lty = 2 )

					title(
						main = paste( pheno, annotation ),
						xlab = "phenotype lowest p-value log10(percentile)",
						ylab = "Test -log10(p-value)"
					)
					axis( 1,
						at = log10( c( parameters$myP_prct[ parameters$myP_prct <= 0.1 ], 0.9 ) ),
						labels = paste( "Top ", c( parameters$myP_prct[ parameters$myP_prct <= 0.1 ], 0.9 ) * 100, "%", sep = "" )
					)
					axis( 2, at = seq( 0, parameters$neglog10max, length.out = parameters$N_ytics ) )

					mykeys <- ! key.names %in% exclusion_list

					legend(
						"topleft",
			#             inset = c( -0.25, 0 ),
						key.names[ mykeys ],
						pch = key.points[ mykeys ],
						col = key.colors[ mykeys ],
						pt.cex = 1.5,
						xpd = T
					)

					dev.off()

				}

			}

		}

	}

	if ( parameters$verbose ) {
		dataname <- paste( data.file, "_EA.RData", sep = "" )
		save.image( file = dataname )
	}

} else if ( !parameters$helpme ) {

	cat( "\nyou may have neglected to provide input.\n" )
	parameters$helpme <- TRUE

}

if ( parameters$helpme ) {

	print_help_message( parameters )

}
