#!/usr/bin/env Rscript

# 1. At the shell prompt type:
# 
# plink --bfile raw-GWA-data --missing --out raw-GWA-data
# 
# to create the files raw-GWA-data.imiss and raw-GWA-data.lmiss.
# The fourth column in the imiss file (N_MISS) gives the number of missing SNPs and the sixth column
# (F_MISS) gives the proportion of missing SNPs per individual.
# 
# 2. At te shell prompt type:
# 
# plink --bfile raw-GWA-data --het --out raw-GWA-data
# 
# to create the file raw-GWA-data.het where the third column gives the observed number of homozygous
# genotypes [O(Hom)] and the fifth column gives the number of non-missing genotypes [N(NM)], per
# individual.
# 
# 3. Calculate the observed heterozygosity rate per individual using the formula
# 
#             hrate = (N(NM) - O(Hom))/N(NM).
# 
# 4. Create a graph where the observed heterozygosity rate per individual is plotted on the x-axis
# and the proportion of missing SNPs per individuals is plotted on the y-axis. This can be done using
# standard software such as Excel or statistical packages such as SPSS. A script for calculating the
# heterozygosity rate and producing the graph using R has been supplied (imiss-vs-het.Rscript). Type
# 
# R CMD BATCH imiss-vs-het.Rscript at the unix prompt to run this script and create the graph
# (raw-GWA-data.imiss-vs-het.pdf).
# 
# 5. Exmine the plot to decide reasonable thresholds at which to exclude individuals based on
# elevated missing or extreme heterozygosity. We chose to exclude all individuals with a genotype
# failure rate e 0.03 (Fig 1, vertical dashed line) and/or heterozygosity rate ? 3 standard deviations
# from the mean (Fig 1, horizontal dashed lines). Add the family ID and individual ID of the 30
# samples failing this QC to a file named fail-imisshet-qc.txt.

parse_command_line <- function ( myArgs=NULL ) {

	parameters <- list(

		hetfile = '',
		missfile = '',
		outprefix = 'sqc'

	)

	if ( length( myArgs ) > 0 ) {

		opt.vector <- vector()
		index.vector <- 1 : length( myArgs )

		sub.index.vector <- index.vector[ myArgs == "-h" ]
        if ( length( sub.index.vector ) > 0 ) {
            parameters$hetfile <- myArgs[ sub.index.vector[ length( sub.index.vector ) ] + 1 ]
            opt.vector <- c(
                opt.vector,
                sub.index.vector,
                sub.index.vector + 1
            )
        }

		sub.index.vector <- index.vector[ myArgs == "-m" ]
        if ( length( sub.index.vector ) > 0 ) {
            parameters$missfile <- myArgs[ sub.index.vector[ length( sub.index.vector ) ] + 1 ]
            opt.vector <- c(
                opt.vector,
                sub.index.vector,
                sub.index.vector + 1
            )
        }
		sub.index.vector <- index.vector[ myArgs == "-o" ]
        if ( length( sub.index.vector ) > 0 ) {
            parameters$outprefix <- myArgs[ sub.index.vector[ length( sub.index.vector ) ] + 1 ]
            opt.vector <- c(
                opt.vector,
                sub.index.vector,
                sub.index.vector + 1
            )
        }
		
		if ( length( opt.vector ) == 0 ) parameters$data.files <- myArgs
		else parameters$data.files <- myArgs[ -opt.vector ]

	} else {

		cat( "\nyou may have neglected to provide input.\n" )
		parameters$helpme <- TRUE

	}

	return( parameters )

}

options( "warn" = 1 )

myArgs <- commandArgs( TRUE )

parameters <- parse_command_line( myArgs )

if ( parameters$missfile != '' && parameters$hetfile != '' ) {

    if ( all( file.exists( parameters$missfile, parameters$hetfile ) ) ) {
        pdf( paste( parameters$outprefix, 'hetVSmiss.pdf', sep='_' ) )
        logfile <- file( paste( parameters$outprefix, 'hetVSmiss.log', sep='_' ) )
        read.table( parameters$hetfile, head=T ) -> hetdata
        read.table( parameters$missfile, head=T ) -> missdata
        mydata = merge( missdata, hetdata, by = 1:2 )
        hetrate = ( mydata[, 9] - mydata[, 7] ) / mydata[, 9]
        meanhetrate = mean( hetrate, na.rm=T )
        sdhetrate = sd( hetrate, na.rm=T )
        missrate = mydata[, 6]
        missratethreshmax = 0.2
        missratethresh = min(mean(missrate, na.rm=T) + 5*sd(missrate, na.rm=T), 0.1)
        plot( missrate, hetrate, ylim=c(
            min( meanhetrate - 2*sqrt( missratethreshmax^2 ), min( hetrate, na.rm=T ) ),
            max( meanhetrate + 2*sqrt( missratethreshmax^2 ), max( hetrate, na.rm=T ) )
        ) )
        abline( a=meanhetrate + 5*sdhetrate, b=0, col='red', lty=2 )
        abline( a=meanhetrate - 5*sdhetrate, b=0, col='red', lty=2 )
        abline( v=missratethresh, col='red', lty=2 )
        abline( v=0, col='gray', lty=2 )
        missratevec = seq( 0.0, 0.2, 0.001 )
        lines( missratevec, meanhetrate - 2*sqrt( 0.2^2 - missratevec^2 ), col='blue', lty=2 )
        lines( missratevec, meanhetrate + 2*sqrt( 0.2^2 - missratevec^2 ), col='blue', lty=2 )
        myset = hetrate <= meanhetrate + 5*sdhetrate & hetrate >= meanhetrate - 5*sdhetrate & missrate <= missratethresh |
            missrate >= missratethresh & missrate^2 + ( (hetrate - meanhetrate)/2 )^2 <= missratethreshmax^2
        inliers = mydata[ myset, 1:2 ]
        cat( 'retaining', sum( myset ), 'individuals..\n', file=logfile )
        write.table( inliers, file=paste0( parameters$outprefix, '.clean.id' ),
            sep="\t", quote=F, col.names=F, row.names=F )
        dev.off()
    }

}

